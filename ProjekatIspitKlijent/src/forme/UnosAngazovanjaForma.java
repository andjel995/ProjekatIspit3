/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Angazovanje;
import domen.FormaMod;
import domen.Predmet;
import domen.Profesor;
import domen.RezultatCuvanja;
import domen.TipNastave;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logika.Kontroler;
import model.tabele.ModelTabeleAngazovanja;
import session.Session;

/**
 *
 * @author User
 */
public class UnosAngazovanjaForma extends javax.swing.JDialog {

    /**
     * Creates new form GlavnaForma
     */
    public UnosAngazovanjaForma(java.awt.Frame parent, boolean modal, FormaMod mod) {
        super(parent, modal);
        initComponents();
        centriraj();
        popuniTabelu();
        try {
            srediFormu(mod);
        } catch (Exception ex) {
            Logger.getLogger(UnosAngazovanjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        cmbPredmet = new javax.swing.JComboBox<>();
        cmbProfesor = new javax.swing.JComboBox<>();
        cmbTipNastave = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAngazovanja = new javax.swing.JTable();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unos angazovanja");

        panel.setBackground(java.awt.Color.lightGray);

        cmbPredmet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPredmet.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPredmetItemStateChanged(evt);
            }
        });

        cmbProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProfesorActionPerformed(evt);
            }
        });

        cmbTipNastave.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Predmet:");

        jLabel2.setText("Profesor:");

        jLabel3.setText("Tip nastave:");

        tblAngazovanja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAngazovanja);

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(78, 78, 78)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPredmet, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTipNastave, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnObrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSacuvaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIzmeni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPredmet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTipNastave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi)
                        .addGap(121, 121, 121)
                        .addComponent(btnIzmeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSacuvaj))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        // TODO add your handling code here:
        try
        {
         Predmet p = (Predmet) cmbPredmet.getSelectedItem();
        Profesor profesor = (Profesor) cmbProfesor.getSelectedItem();
        TipNastave tn = (TipNastave) cmbTipNastave.getSelectedItem();
        Angazovanje a = new Angazovanje(p, profesor, tn);

        ModelTabeleAngazovanja mta = (ModelTabeleAngazovanja) tblAngazovanja.getModel();
        List<Angazovanje> novaLista = mta.dajAngazovanja();
        boolean uspesno = Kontroler.dajInstancu().izmeniAngazovanja(a, novaLista);
        if(uspesno)
        {
            JOptionPane.showMessageDialog(this,"Uspesno izmenjeno");
            this.dispose();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Nema promena za izmenu!","",JOptionPane.WARNING_MESSAGE);
        }
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Greska pri izmeni");
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        // TODO add your handling code here:
        ModelTabeleAngazovanja mta = (ModelTabeleAngazovanja) tblAngazovanja.getModel();
        List<Angazovanje> lista = mta.dajAngazovanja();
        if(lista.size() == 0)
        {
            JOptionPane.showMessageDialog(this, "Tabela je prazna","" ,JOptionPane.WARNING_MESSAGE);
            return;
        }
        try{
            RezultatCuvanja rc = Kontroler.dajInstancu().sacuvajSve(lista);
            if(rc.equals(RezultatCuvanja.Uspesan))
            JOptionPane.showMessageDialog(this, "Uspesno sacuvani podaci.");
            else
            JOptionPane.showMessageDialog(this, "Uspesno sacuvani podaci osim duplikata","", JOptionPane.WARNING_MESSAGE);

        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Neuspesno cuvanje","",JOptionPane.ERROR_MESSAGE);
        }
        tblAngazovanja.setModel(new ModelTabeleAngazovanja(new ArrayList<>()));
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        // TODO add your handling code here:
        int index = tblAngazovanja.getSelectedRow();
        if(index != -1)
        {
            ModelTabeleAngazovanja mta = (ModelTabeleAngazovanja) tblAngazovanja.getModel();
            mta.obrisiAngazovanje(index);
        } else {
            JOptionPane.showMessageDialog(this, "Red mora biti selektovan!", "Brisanje reda", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // TODO add your handling code here:
        Profesor profesor = (Profesor) cmbProfesor.getSelectedItem();
        Predmet predmet = (Predmet) cmbPredmet.getSelectedItem();
        TipNastave tn = (TipNastave) cmbTipNastave.getSelectedItem();
        Angazovanje a = new Angazovanje(predmet, profesor, tn);
        ModelTabeleAngazovanja mta = (ModelTabeleAngazovanja) tblAngazovanja.getModel();
        List<Angazovanje> lista = mta.dajAngazovanja();
        boolean daLiJeDuplikat = Kontroler.dajInstancu().proveriDuplikate(profesor,predmet, tn, lista);
        if(daLiJeDuplikat)
        {
            JOptionPane.showMessageDialog(this, "Ne moze se ubaciti isti predmet za istog profesora");
            return;
        }
        mta.dodajAngazovanje(a);
    }//GEN-LAST:event_btnDodajActionPerformed

    private void cmbProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProfesorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProfesorActionPerformed

    private void cmbPredmetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPredmetItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            ModelTabeleAngazovanja mta = (ModelTabeleAngazovanja) tblAngazovanja.getModel();
            mta.obrisiSvaAngazovanja();
        }
    }//GEN-LAST:event_cmbPredmetItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<Object> cmbPredmet;
    private javax.swing.JComboBox<Object> cmbProfesor;
    private javax.swing.JComboBox<Object> cmbTipNastave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JTable tblAngazovanja;
    // End of variables declaration//GEN-END:variables

    private void srediFormu(FormaMod mod) throws Exception {
        popuniPredmete();
        popuniProfesore();
        popuniTipAngazovanja();
        switch(mod)
        {
            case NOVO:
                cmbPredmet.setEnabled(true);
                cmbProfesor.setEnabled(true);
                cmbTipNastave.setEnabled(true);
                tblAngazovanja.setEnabled(true);
                btnIzmeni.setVisible(false);
                btnSacuvaj.setVisible(true);
                break;
            case IZMENA:
                cmbPredmet.setEnabled(false);
                cmbProfesor.setEnabled(true);
                cmbTipNastave.setEnabled(true);
                tblAngazovanja.setEnabled(true);
                btnIzmeni.setVisible(true);
                btnSacuvaj.setVisible(false);
                postaviCmbPredmet();
                postaviAngazovanja();
                break;
            default:
        }
    }

    private void popuniPredmete() {
        try {
            cmbPredmet.removeAllItems();
            Kontroler kontroler = Kontroler.dajInstancu();
            List<Predmet> predmeti = kontroler.dajPredmete();
            
            for(Predmet predmet : predmeti)
            {
                cmbPredmet.addItem(predmet);
            }
        } catch (Exception ex) {
            
            Logger.getLogger(UnosAngazovanjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniProfesore() {
        try {
            cmbProfesor.removeAllItems();
            Kontroler kontroler = Kontroler.dajInstancu();
            List<Profesor> profesori = kontroler.dajListuProfesora();
            for(Profesor profesor : profesori)
            {
                cmbProfesor.addItem(profesor);
            }
        } catch (Exception ex) {
            Logger.getLogger(UnosAngazovanjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniTipAngazovanja() {
        cmbTipNastave.removeAllItems();
        for(TipNastave tn : TipNastave.values())
            cmbTipNastave.addItem(tn);
    }

    private void popuniTabelu() 
    {
        try {
            List<Angazovanje> angazovanja = Kontroler.dajInstancu().dajAngazovanja();
            ModelTabeleAngazovanja mta = new ModelTabeleAngazovanja(new ArrayList<Angazovanje>());
            tblAngazovanja.setModel(mta);
        } catch (Exception ex) {
            Logger.getLogger(UnosAngazovanjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void centriraj() {
        this.setLocationRelativeTo(null);
    }

    private void postaviAngazovanja() {
        try {
            Long predmetId = (Long) Session.getInstance().getUseCaseParams().get("predmetId");
            List<Angazovanje> angazovanja = Kontroler.dajInstancu().dajAngazovanjaZaOdredjeniPredmet(predmetId);
            ModelTabeleAngazovanja mta = new ModelTabeleAngazovanja(angazovanja);
            tblAngazovanja.setModel(mta);
        } catch (Exception ex) {
            Logger.getLogger(UnosAngazovanjaForma.class.getName()).log(Level.SEVERE, null, ex);
        }
             
    }

    private void postaviCmbPredmet() throws Exception {
      Long predmetId = (Long) Session.getInstance().getUseCaseParams().get("predmetId");
      Predmet predmet = Kontroler.dajInstancu().nadjiPredmetPoId(predmetId);
      cmbPredmet.setSelectedItem(predmet);
    }
}
